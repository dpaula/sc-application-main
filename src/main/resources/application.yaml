server:
  port: 8082

spring:
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
  datasource:
    url: jdbc:mysql://localhost:3306/aw_healthy_app?createDatabaseIfNotExist=true&serverTimezone=UTC
    username: root
  rabbitmq:
    username: rabbitmq
    password: rabbitmq
    host: localhost
    port: 5672

  # Configuração do Spring Cloud Stream
  cloud:
    stream:
      bindings: # Configuração dos bindings, ou seja, os canais de entrada e saída, que serão utilizados para a comunicação assíncrona
        appCreatedSupplier-out-0: # Canal de saída, que será utilizado para enviar mensagens para o RabbitMQ, que por sua vez, irá encaminhar para os consumidores
          destination: app.v1.event.app-created # Nome do tópico que será criado no RabbitMQ, para que os consumidores possam se inscrever, e receber as mensagens
        appUpdatedSupplier-out-0:
          destination: app.v1.event.app-updated
    # como temos dois canais de saída do mesmo tipo, é necessário criar um bean para cada um, para que o Spring Cloud Stream consiga diferenciá-los
    function:
      definition: appCreatedSupplier;appUpdatedSupplier